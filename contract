// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract Token is ERC20, Ownable {

    event TokensCreated(address indexed recipientParty, uint256 createdTokens);
    event TokensUtilized(address indexed fromAccount, uint256 amount);
    event TokensTransferred(address indexed sender, address indexed receiver, uint256 sentTokens);

    constructor(address ownerAddress) ERC20("Token", "TK") Ownable(ownerAddress) {
        _mint(ownerAddress, 10000); 
    }

    function mintTokens(address recipientParty, uint256 createdTokens) external onlyOwner {
        _mint(recipientParty, createdTokens);
        emit TokensCreated(recipientParty, createdTokens);
    }

    function burnTokens(uint256 utilizedTokens) external {
        _burn(_msgSender(), utilizedTokens);
        emit TokensUtilized(_msgSender(), utilizedTokens);
    }
  
    function transferTokens(address recipientParty, uint256 sentTokens) public returns (bool) {
        _transfer(_msgSender(), recipientParty, sentTokens);
        emit TokensTransferred(_msgSender(), recipientParty, sentTokens);
        return true;
    }
}
